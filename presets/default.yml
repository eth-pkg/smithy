$id: default
type: object
required:
  - commonConfig
properties:
  commonConfig:
    type: object
    required:
      - clients
    properties:
      networkId:
        type: number
        minimum: 1
        default: 1
        errorMessage:
          minimum: "Network ID must be a positive number"
      clients:
        type: object
        required:
          - consensus
          - execution
        properties:
          consensus:
            type: string
            enum:
              - lighthouse
              - lodestar
              - nimbus-eth2
              - prysm
              - teku
            errorMessage:
              enum: "Consensus client must be one of: lighthouse, prysm, teku"
            default: ""
          execution:
            type: string
            enum:
              - besu
              - erigon 
              - geth
              - nethermind
              - reth
            errorMessage:
              enum: "Execution client must be one of: geth, nethermind, besu"
            default: ""
          validator:
            type: string
            enum:
              - lighthouse
              - lodestar
              - nimbus-eth2
              - prysm
              - teku
              - ""
            errorMessage:
              enum: "Validator client must be one of: lighthouse, prysm, teku, or empty string"
            default: ""
      dataDir:
        type: string
        default: "$HOME/ethereum/mainnet"
      engine:
        type: object
        properties:
          apiPort:
            type: number
            minimum: 1024
            maximum: 65535
            default: 8551
            errorMessage:
              minimum: "Engine API port must be >= 1024"
              maximum: "Engine API port must be <= 65535"
          communication:
            type: string
            enum:
              - jwt
            default: "jwt"
            errorMessage:
              enum: "Engine communication method must be 'jwt'"
          endpointUrl:
            type: string
            pattern: "^https?://[a-zA-Z0-9.-]+(:[0-9]+)?$"
            default: "http://localhost:8551"
            errorMessage:
              pattern: "Engine endpoint URL must be a valid http or https URL"
          host:
            type: string
            default: "localhost"
          ip:
            type: string
            pattern: "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$"
            default: "127.0.0.1"
            errorMessage:
              pattern: "Must be a valid IPv4 address"
          jwtFile:
            type: string
            default: "$HOME/ethereum/mainnet/jwt.hex"
          scheme:
            type: string
            enum:
              - http
              - https
            default: "http"
            errorMessage:
              enum: "Engine scheme must be either 'http' or 'https'"
      features:
        type: object
        properties:
          mevBoost:
            type: boolean
            default: false
          monitoring:
            type: boolean
            default: true
          staking:
            type: boolean
            default: false
      network:
        type: string
        enum:
          - mainnet
          - sepolia
          - holesky
          - hoodie
          - ephemery
          - custom
        default: "mainnet"
        errorMessage:
          enum: "Network must be one of: mainnet, goerli, sepolia, holesky, hoodie, ephemery, custom"
      operatingSystem:
        type: string
        enum:
          - linux
          - darwin
          - windows
        default: "linux"
        errorMessage:
          enum: "Operating system must be one of: linux, darwin, windows"
      syncMode:
        type: string
        enum:
          - snap
          - full
          - light
        default: "snap"
        errorMessage:
          enum: "Sync mode must be one of: snap, full, light"
  consensusConfig:
    type: object
    properties:
      httpPort:
        type: number
        minimum: 1024
        maximum: 65535
        default: 5052
        errorMessage:
          minimum: "HTTP port must be >= 1024"
          maximum: "HTTP port must be <= 65535"
      metricsPort:
        type: number
        minimum: 1024
        maximum: 65535
        default: 8008
        errorMessage:
          minimum: "Metrics port must be >= 1024"
          maximum: "Metrics port must be <= 65535"
      p2pPort:
        type: number
        minimum: 1024
        maximum: 65535
        default: 9000
        errorMessage:
          minimum: "P2P port must be >= 1024"
          maximum: "P2P port must be <= 65535"
  validatorConfig:
    type: object
    properties:
      dataDir:
        type: string
        default: "$HOME/ethereum/validator"
      beaconRpcProvider:
        type: string
        pattern: "^[a-zA-Z0-9.-]+(:[0-9]+)?$"
        default: "localhost:5052"
        errorMessage:
          pattern: "Beacon RPC provider must be a valid host:port"
      numValidators:
        type: number
        minimum: 1
        default: 1
        errorMessage:
          minimum: "Number of validators must be at least 1"
      feeRecipientAddress:
        type: string
        pattern: "^0x[a-fA-F0-9]{40}$"
        default: "0x0000000000000000000000000000000000000000"
        errorMessage:
          pattern: "Fee recipient address must be a valid Ethereum address"
      metricsPort:
        type: string
        pattern: "^[0-9]+$"
        default: "8009"
        errorMessage:
          pattern: "Metrics port must be a valid port number"
      graffiti:
        type: string
        default: ""
      graffitiFile:
        type: string
        default: ""
      proposerConfigFile:
        type: string
        default: ""
      suggestedGasLimit:
        type: number
        default: 30000000  # Common default for block gas limit
      doppelgangerProtection:
        type: boolean
        default: true
      builderEnabled:
        type: boolean
        default: false
      externalSignerUrl:
        type: string
        default: ""
      externalSignerKeystore:
        type: string
        default: ""
      externalSignerKeystorePasswordFile:
        type: string
        default: ""
      externalSignerPublicKeys:
        type: array
        items:
          type: string
        default: []
      externalSignerTimeout:
        type: number
        default: 5000  # milliseconds, common default
      externalSignerTruststore:
        type: string
        default: ""
      externalSignerTruststorePasswordFile:
        type: string
        default: ""
      proposerBlindedBlocksEnabled:
        type: boolean
        default: false
      proposerConfigRefreshEnabled:
        type: boolean
        default: false
      metricsEnabled:
        type: boolean
        default: true
      metricsAddress:
        type: string
        default: "127.0.0.1"
      logFile:
        type: string
        default: ""
      logLevel:
        type: string
        default: "info"
      logFormat:
        type: string
        default: "auto"
      validatorsDir:
        type: string
        default: "$HOME/ethereum/validator/keys"
      secretsDir:
        type: string
        default: "$HOME/ethereum/validator/secrets"
      configFile:
        type: string
        default: ""
      distributed:
        type: boolean
        default: false
  executionConfig:
    type: object
    properties:
      http:
        type: object
        properties:
          apiPrefixes:
            type: array
            minItems: 1
            default: ["eth", "net", "web3"]
            items:
              type: string
          cors:
            type: array
            default: ["*"]
            items:
              type: string
          enabled:
            type: boolean
            default: true
          port:
            type: number
            minimum: 1024
            maximum: 65535
            default: 8545
            errorMessage:
              minimum: "HTTP port must be >= 1024"
              maximum: "HTTP port must be <= 65535"
      metrics:
        type: object
        properties:
          enabled:
            type: boolean
            default: true
          port:
            type: number
            minimum: 1024
            maximum: 65535
            default: 6060
            errorMessage:
              minimum: "Metrics port must be >= 1024"
              maximum: "Metrics port must be <= 65535"
      p2p:
        type: object
        properties:
          maxPeers:
            type: number
            minimum: 1
            maximum: 1000
            default: 50
            errorMessage:
              minimum: "Max peers must be at least 1"
              maximum: "Max peers should not exceed 1000"
          port:
            type: number
            minimum: 1024
            maximum: 65535
            default: 30303
            errorMessage:
              minimum: "P2P port must be >= 1024"
              maximum: "P2P port must be <= 65535"
      ws:
        type: object
        properties:
          enabled:
            type: boolean
            default: false
          port:
            type: number
            minimum: 1024
            maximum: 65535
            default: 8546
            errorMessage:
              minimum: "WebSocket port must be >= 1024"
              maximum: "WebSocket port must be <= 65535"

# Custom validation rule for validator client when staking is enabled
if:
  type: object
  properties:
    commonConfig:
      type: object
      properties:
        features:
          type: object
          properties:
            staking:
              type: boolean
              const: true
then:
  type: object
  properties:
    commonConfig:
      type: object
      properties:
        clients:
          type: object
          required:
            - validator
          properties:
            validator:
              type: string
              minLength: 1
              errorMessage:
                minLength: "Validator client is required when staking is enabled"
    validatorConfig:
      type: object
      required:
        - beaconRpcProvider
        - feeRecipientAddress
      errorMessage:
        required: "Validator configuration is required when staking is enabled"

allOf:
  - if:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            network:
              const: mainnet
    then:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            networkId:
              const: 1
              errorMessage:
                const: "mainnet must have networkId 1"
  - if:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            network:
              const: sepolia
    then:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            networkId:
              const: 11155111
              errorMessage:
                const: "sepolia must have networkId 11155111"
  - if:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            network:
              const: holesky
    then:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            networkId:
              const: 17000
              errorMessage:
                const: "holesky must have networkId 17000"
  - if:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            network:
              const: hoodie
    then:
      type: object
      properties:
        commonConfig:
          type: object
          properties:
            networkId:
              const: 17001
              errorMessage:
                const: "hoodie must have networkId 17001"