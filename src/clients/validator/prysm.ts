import { ClientConfig, EthereumConfig } from "../types";

/**
 * Generate Prysm validator client configuration
 * @param config The Ethereum configuration
 * @returns Prysm validator configuration as a string
 */
function generateConfig(config: EthereumConfig): string {
  const { commonConfig, consensusConfig } = config;

  // This is a dummy implementation - in a real scenario,
  // we would generate a proper YAML configuration
  return `
# Prysm Validator Configuration File
# Generated by Smithy

datadir: "${commonConfig.dataDir}/prysm-validator"
${commonConfig.network}: true
accept-terms-of-use: true

# Beacon node setting
beacon-rpc-provider: "localhost:${consensusConfig.httpPort}"

# Web UI settings
web: true
web-host: 0.0.0.0
web-port: 7500
monitoring-host: 0.0.0.0
monitoring-port: 8081

# Fee recipient for block proposals
suggested-fee-recipient: "0x0000000000000000000000000000000000000000"

# Security settings
enable-doppelganger: true

# Graffiti
graffiti: "Smithy"

# Wallet settings
wallet-dir: "${commonConfig.dataDir}/prysm-validator/wallet"
wallet-password-file: "${commonConfig.dataDir}/prysm-validator/password.txt"

# MEV-Boost settings
enable-builder: ${commonConfig.features.mevBoost}
`;
}

export const client: ClientConfig = {
  name: "Prysm Validator",
  type: "validator",
  generateConfig,
};
