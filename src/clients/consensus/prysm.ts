import { ClientConfig, EthereumConfig } from "@/clients/types";

/**
 * Generate Prysm consensus client configuration
 * @param config The Ethereum configuration
 * @returns Prysm configuration as a string
 */
function generateConfig(config: EthereumConfig): string {
  const { commonConfig, consensusConfig } = config;

  // This is a dummy implementation - in a real scenario,
  // we would generate a proper YAML configuration
  return `
# Prysm Beacon Node Configuration File
# Generated by Smithy

datadir: "${commonConfig.dataDir}/prysm-beacon"
${commonConfig.network}: true
accept-terms-of-use: true

# P2P Configuration
p2p-host-ip: ""
p2p-host-dns: ""
p2p-tcp-port: ${consensusConfig.p2pPort}
p2p-udp-port: ${consensusConfig.p2pPort}
subscribe-all-subnets: true
historical-slasher-node: false

# RPC Configuration
rpc-host: 0.0.0.0
rpc-port: ${consensusConfig.httpPort}
grpc-gateway-host: 0.0.0.0
grpc-gateway-port: ${consensusConfig.httpPort}
grpc-gateway-corsdomain: []
monitoring-host: 0.0.0.0
monitoring-port: ${consensusConfig.metricsPort}

# Execution layer configuration
execution-endpoint: ${commonConfig.engine.endpointUrl}
jwt-secret: ${commonConfig.engine.jwtFile}
suggested-fee-recipient: "0x0000000000000000000000000000000000000000"

# Builder Configuration
builder-proposals: ${commonConfig.features.mevBoost}

# Checkpoint synchronization
checkpoint-sync-url: ""
genesis-beacon-api-url: ""
`;
}

export const client: ClientConfig = {
  name: "Prysm",
  type: "consensus",
  generateConfig,
};
