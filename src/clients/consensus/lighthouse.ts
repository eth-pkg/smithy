import { ClientConfig, EthereumConfig } from "@/clients/types";

/**
 * Generate Lighthouse consensus client configuration
 * @param config The Ethereum configuration
 * @returns Lighthouse configuration as a string
 */
function generateConfig(config: EthereumConfig): string {
  const { commonConfig, consensusConfig } = config;

  // This is a dummy implementation - in a real scenario,
  // we would generate a proper TOML/YAML configuration
  return `
# Lighthouse Configuration File
# Generated by Smithy

datadir: "${commonConfig.dataDir}/lighthouse"
network: "${commonConfig.network}"

http: true
http-address: 0.0.0.0
http-port: ${consensusConfig.httpPort}

metrics: ${commonConfig.features.monitoring}
metrics-address: 0.0.0.0
metrics-port: ${consensusConfig.metricsPort}

execution-endpoint: "${commonConfig.engine.endpointUrl}"
execution-jwt: "${commonConfig.engine.jwtFile}"

# P2P settings
listen-address: 0.0.0.0
port: ${consensusConfig.p2pPort}
discovery-port: ${consensusConfig.p2pPort}
target-peers: 70
subscribe-all-subnets: true
import-all-attestations: true

# Slasher settings
slasher: false
slasher-history-length: 4096

# MEV Boost settings
builder-proposals: ${commonConfig.features.mevBoost}
`;
}

export const client: ClientConfig = {
  name: "Lighthouse",
  type: "consensus",
  generateConfig,
};
